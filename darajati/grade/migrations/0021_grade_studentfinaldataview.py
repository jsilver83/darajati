# Generated by Django 2.0.1 on 2019-01-01 10:52

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('grade', '0020_total_rounding_function'),
    ]

    operations = [
        migrations.RunSQL(
            '''
            DROP VIEW IF EXISTS grade_studentfinaldataview;
            
            CREATE OR REPLACE VIEW grade_studentfinaldataview AS
            SELECT q.*, COALESCE((select letter_grade 
                           from grade_lettergrade 
                           where
                             course_offering_id = q.course_offering_id and
                             cut_off_point >= q.total_rounded
                           order by cut_off_point desc 
                           LIMIT 1), 'UD') calculated_letter_grade
            FROM(
            SELECT 
              enrollment_semester.code semester_code, 
              enrollment_semester.id semester_id, 
              enrollment_department.code department_code, 
              enrollment_department.id department_id, 
              enrollment_course.code course_code, 
              enrollment_course.id course_id, 
              enrollment_courseoffering.id course_offering_id, 
              enrollment_courseoffering.coordinated, 
              enrollment_section.code section_code, 
              enrollment_section.id section_id, 
              enrollment_enrollment.id enrollment_id, 
              enrollment_enrollment.letter_grade,
              enrollment_enrollment.active,
              enrollment_student.university_id,
              enrollment_student.english_name,
              enrollment_student.arabic_name,
              COALESCE(student_total.total_weights, 0.00) total_weights,
              COALESCE(student_total.total, 0.00) total,
              attendance_deduction(enrollment_enrollment.id),
              student_total.total - attendance_deduction(enrollment_enrollment.id) total_after_deduction,
              CASE WHEN enrollment_courseoffering.coordinated IS TRUE THEN 
                total_rounding(student_total.total - attendance_deduction(enrollment_enrollment.id), 
                enrollment_courseoffering.total_rounding_type, enrollment_courseoffering.total_decimal_places) 
              ELSE total_rounding(student_total.total - attendance_deduction(enrollment_enrollment.id), 
                enrollment_section.rounding_type, enrollment_section.total_decimal_places) 
              END total_rounded
            FROM 
              public.enrollment_enrollment, 
              public.enrollment_section, 
              public.enrollment_courseoffering, 
              public.enrollment_course, 
              public.enrollment_semester, 
              public.enrollment_department,
              public.enrollment_student,
              (SELECT 
                  grade_studentgrade.enrollment_id, 
                  SUM(grade_gradefragment.weight) total_weights,
                  SUM(grade_studentgrade.grade_quantity) total
                FROM 
                  public.grade_studentgrade, 
                  public.grade_gradefragment
                WHERE
                  grade_studentgrade.grade_fragment_id = grade_gradefragment.id and
                  grade_gradefragment.student_total_grading is True
                GROUP BY
                  grade_studentgrade.enrollment_id) student_total
            WHERE 
              enrollment_section.course_offering_id = enrollment_courseoffering.id AND
              enrollment_section.id = enrollment_enrollment.section_id AND
              enrollment_courseoffering.semester_id = enrollment_semester.id AND
              enrollment_course.department_id = enrollment_department.id AND
              enrollment_course.id = enrollment_courseoffering.course_id AND
              enrollment_student.id = enrollment_enrollment.student_id AND
              student_total.enrollment_id = enrollment_enrollment.id AND 
              letter_grade is distinct from 'MOVED') q;
            '''
        )
    ]
