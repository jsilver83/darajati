- name: Deploy darajati
  hosts: application-servers
  become: yes
  become_user: root

  # common variables to all environments
  # for environment-specific variables, see:
  # environments/<env-name>/group_vars/all/vars.yml
  vars:
    vault_url: https://vault.itc.kfupm.edu.sa
    django_project_name: darajati
    django_project_admin_username: joud
    django_project_admin_email: joud@kfupm.edu.sa
    django_project_package_name: darajati
    buildbot_autobuild: false
    ssl_cert_path: "/etc/ssl/certs"

    apache_authn: cas
    apache_auth:
      - path: /
        authn_type: cas
        authz_type: none

    admins:
      - name: abdullah joud
        email: joud@kfupm.edu.sa
    uwsgi_processes: 64

# tasks to be performed before role tasks, if any
  pre_tasks:

    - pause:
        prompt: Your Active Directory username
      when: not buildbot_autobuild
      register: ad_username
      connection: local

    - pause:
        prompt: Your Active Directory password
        echo: no
      when: not buildbot_autobuild
      register: ad_password
      connection: local

    - name: Vault authentication
      uri:
        url: "{{ vault_url }}/v1/auth/ldap/login/{{ ad_username.user_input }}"
        method: POST
        body: {"password": "{{ ad_password.user_input }}"}
        body_format: json
      connection: local
      become: no
      register: auth
      when: not buildbot_autobuild

    - name: set token
      set_fact:
        vault_access_token: "{{ auth.json.auth.client_token }}"
      when: not buildbot_autobuild

    - name: Retrieve secret key from Vault
      set_fact:
        secret_key: "{{ lookup('hashi_vault', 'secret=secret/{{ env }}/operations/apps/darajati/secret_key:value token={{ vault_access_token }} url={{ vault_url }} cacert={{ ssl_cert_path }}') }}"
      connection: local

    - name: Retrieve database password from vault
      set_fact:
        database_password: "{{ lookup('hashi_vault', 'secret=secret/{{ env }}/database/apps/darajati/database_password:value token={{ vault_access_token }} url={{ vault_url }} cacert={{ ssl_cert_path }}') }}"
      connection: local

    - name: Retrieve banner api password from vault
      set_fact:
        banner_api_password: "{{ lookup('hashi_vault', 'secret=secret/{{ env }}/operations/apps/darajati/banner_api_password:value token={{ vault_access_token }} url={{ vault_url }} cacert={{ ssl_cert_path }}') }}"
      connection: local

    - name: Retrieve email password from vault
      set_fact:
        email_password: "{{ lookup('hashi_vault', 'secret=secret/{{ env }}/email/apps/darajati/email_password:value token={{ vault_access_token }} url={{ vault_url }} cacert={{ ssl_cert_path }}') }}"
      connection: local

    - name: Generate local settings
      set_fact:
        django_project_local_settings: "{{ lookup('template', 'local_settings.py.j2') }}"

    - name: Install required software packages for WeasyPrint
      apt: pkg="{{ item }}" state=installed
      with_items:
        - build-essential
        - python3-dev
        - python3-pip
        - python3-setuptools
        - python3-wheel
        - python3-cffi
        - libcairo2
        - libpango-1.0-0
        - libpangocairo-1.0-0
        - libgdk-pixbuf2.0-0
        - libffi-dev
        - shared-mime-infol

  roles:
    - django-project

  # tasks to be performed after role tasks, if any
  # post_tasks:
  #   - name: some task
  #     ...
